name: Foodgram workflow

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8

  build_and_push_backend_image_to_docker_hub:
    name: Push Docker backend_image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push backend_image to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_LOGIN }}/backend:latest

  build_and_push_frontend_image_to_docker_hub:
    name: Push Docker frontend_image to Docker Hub
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_image_to_docker_hub

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Push frontend_image to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_LOGIN }}/frontend:latest

  deploy:
    name: Deploying on remote server
    runs-on: ubuntu-latest
    needs:
      - tests
      - build_and_push_backend_image_to_docker_hub
      - build_and_push_frontend_image_to_docker_hub

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

          script: |

            sudo rm -f .env        
            sudo touch .env
            sudo chmod 666 .env
            
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
            sudo docker rmi ${{ secrets.DOCKER_HUB_LOGIN }}/backend
            sudo docker rmi ${{ secrets.DOCKER_HUB_LOGIN }}/frontend
            
            sudo docker pull ${{ secrets.DOCKER_HUB_LOGIN }}/backend:latest
            sudo docker pull ${{ secrets.DOCKER_HUB_LOGIN }}/frontend:latest
            
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker-compose up -d --build
            
            sudo docker-compose exec -it backend bash python manage.py collectstatic -yes
            sudo docker-compose exec -it backend bash python manage.py migrate

  send_message:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
